{
  "name": "mongoose-shortid",
  "description": "Short Ids for mongoose",
  "author": {
    "name": "Jason Choy",
    "email": "jjwchoy@gmail.com"
  },
  "version": "0.4.1",
  "contributors": [
    {
      "name": "Jason Choy",
      "email": "jjwchoy@gmail.com"
    },
    {
      "name": "John Papandriopoulos",
      "email": "jpap@snappylabs.com"
    }
  ],
  "main": "./index.js",
  "directories": {
    "lib": "."
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jjwchoy/mongoose-shortid"
  },
  "keywords": [
    "mongoose"
  ],
  "dependencies": {
    "bignum": "~0.6.1"
  },
  "peerDependencies": {
    "mongoose": ">= 3.5.0 < 4"
  },
  "license": "MIT",
  "readme": "mongoose-shortid\n================\n\nThis plugin provides a new Schema Type, ShortId, that can be used in place of ObjectId. The generated IDs are random url-safe strings of configurable length, represented in a configurable base (10, 16, 32, 36, 62, 64 only).\n\nThis plugin will automatically retry inserts on a collision.\n\n### Usage\n\n```javascript\nvar mongoose = require('mongoose');\nvar ShortId = require('mongoose-shortid');\n\nvar personSchema = mongoose.Schema({\n    _id: ShortId,\n    name: String\n});\n```\n\n### Options\n\nThe default options are:\n\n```javascript\nvar personSchema = mongoose.Schema({\n    _id: {\n        type: ShortId,\n        len: 7,     // Length 7 characters\n        base: 64,   // Web-safe base 64 encoded string\n        alphabet: undefined // Use default alphabet for base\n        retries: 4  // Four retries on collision\n    },\n    name: String\n});\n```\n\n### Custom Alphabets\n\nA custom alphabet can be provided using the `alphabet` option. This takes priority over the `base` argument.\n\n```javascript\nvar personSchema = mongoose.Schema({\n    _id: {\n        type: ShortId,\n        len: 9,\n        alphabet: 'fubar'\n    }\n});\n```\n\nThe generated IDs will be 9 characters long with only the characters `f` `u` `b` `a` and `r`.\n\n\n### Custom ID Generation\n\nA custom ID generator function can be provided by setting the `generator` option. This function will be called with two arguments: `generatorOptions` and `callback`.\n\nThe `generatorOptions` is made up from the `generatorOptions` object in the field options (if set), with `len`, `base` and `alphabet` overriden if set on the field options.\n\nThe `callback` function expects to be called with `err` and `id` parameters.\n\nHere's an example:\n\n```javascript\nvar mongoose = require('mongoose');\nvar ShortId = require('mongoose-shortid');\n\nfunction customIdGenerator(options, callback) {\n    var desiredLength = options.len || 7;\n    var base = options.base || 64;\n    var alphabet = options.alphabet || alphabetForBase(base);\n    var customOption = options.customOption;\n    \n    // do Id generation\n    var generatedId = ...;\n\n    if (generatedId) {\n        callback(null, generatedId);\n    } else {\n        callback(err);\n    }\n}\n\nvar exampleSchema = mongoose.Schema({\n    _id: {\n        type: ShortId,\n        len:4,\n        generator: customIdGenerator,\n        generatorOptions: { customOption: 'foo' }\n    },\n    name: String\n});\n\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jjwchoy/mongoose-shortid/issues"
  },
  "homepage": "https://github.com/jjwchoy/mongoose-shortid",
  "_id": "mongoose-shortid@0.4.1",
  "dist": {
    "shasum": "e8ea250227318d5baa297b9fa9452cd7391e8b80"
  },
  "_from": "mongoose-shortid@*",
  "_resolved": "https://registry.npmjs.org/mongoose-shortid/-/mongoose-shortid-0.4.1.tgz"
}
