{
  "name": "inbox",
  "version": "1.1.57",
  "author": {
    "name": "Andris Reinman"
  },
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "main": "lib/client.js",
  "dependencies": {
    "mimelib": "*",
    "utf7": "~1.0.0",
    "xoauth2": "*"
  },
  "devDependencies": {
    "nodeunit": "*",
    "hoodiecrow": "~1.1.19"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "homepage": "https://github.com/andris9/inbox",
  "repository": {
    "type": "git",
    "url": "https://github.com/andris9/inbox.git"
  },
  "license": "MIT",
  "readme": "# inbox\n\nThis is a work in progress IMAP client for node.js.\n\nThe project consists of two major parts\n\n  * IMAP command parser (token based, more or less complete)\n  * IMAP control for accessing mailboxes (under construction)\n\n[![Build Status](https://secure.travis-ci.org/andris9/inbox.png)](http://travis-ci.org/andris9/inbox)\n[![NPM version](https://badge.fury.io/js/inbox.png)](http://badge.fury.io/js/inbox)\n\n\n## Installation\n\nInstall from npm\n\n    npm install inbox\n\n## API\n\n**NB!** This API is preliminary and may change.\n\nUse **inbox** module\n```javascript\nvar inbox = require(\"inbox\");\n```\n### Create new IMAP connection\n\nCreate connection object with\n```javascript\ninbox.createConnection(port, host, options)\n```\n\nwhere\n\n  * **port** is the port to the server (defaults to 143 on non-secure and to 993 on secure connection)\n  * **host** is the hostname of the server\n  * **options** is an options object for auth etc.\n  * **options.secureConnection** is a Boolean value to indicate if the connection is initially secure or not\n  * **options.auth** is an authentication object\n  * **options.auth.user** is the IMAP username\n  * **options.auth.pass** is the IMAP password\n  * **options.auth.XOAuth2** (optional) is either an object with {user, clientId, clientSecret, refreshToken} or *xoauth2.createXOAuth2Generator* object, see [xoauth2](https://github.com/andris9/xoauth2) for details\n  * **options.auth.XOAuthToken** (optional) is either a String or *inbox.createXOAuthGenerator* object\n  * **options.clientId** is optional client ID params object\n  * **options.clientId.name** is is the name param etc. see [rfc 2971](http://tools.ietf.org/html/rfc2971#section-3.3) for possible field names\n\nExample:\n```javascript\nvar client = inbox.createConnection(false, \"imap.gmail.com\", {\n    secureConnection: true,\n    auth:{\n        user: \"test.nodemailer@gmail.com\",\n        pass: \"Nodemailer123\"\n    }\n});\n```\n\nOr for login with XOAUTH2 (see examples/xoauth2)\n```javascript\n// XOAUTH2\nvar client = inbox.createConnection(false, \"imap.gmail.com\", {\n    secureConnection: true,\n    auth:{\n        XOAuth2:{\n            user: \"example.user@gmail.com\",\n            clientId: \"8819981768.apps.googleusercontent.com\",\n            clientSecret: \"{client_secret}\",\n            refreshToken: \"1/xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI\",\n            accessToken: \"vF9dft4qmTc2Nvb3RlckBhdHRhdmlzdGEuY29tCg==\",\n            timeout: 3600\n        }\n    }\n});\n```\n\n\nOr for login with XOAUTH (see examples/xoauth-3lo.js and examples/xoauth-2lo.js)\n\n```javascript\n// 3-legged- oauth\nvar client = inbox.createConnection(false, \"imap.gmail.com\", {\n    secureConnection: true,\n    auth:{\n        XOAuthToken: inbox.createXOAuthGenerator({\n            user: \"test.nodemailer@gmail.com\",\n            token: \"1/Gr2OVA2Ol64fNyjZCns-bkRau5eLisbdlEa_HSuTaEk\",\n            tokenSecret: \"ymFpseHtEnrIsuL8Ppbfnnk3\"\n        })\n    }\n});\n```\n\nWith 2-legged OAuth, consumerKey and consumerSecret need to have proper values, vs 3-legged OAuth where both default to \"anonymous\".\n```javascript\n// 2-legged- oauth\nvar client = inbox.createConnection(false, \"imap.gmail.com\", {\n    secureConnection: true,\n    auth:{\n        XOAuthToken: inbox.createXOAuthGenerator({\n            user: \"test.nodemailer@gmail.com\",\n            requestorId: \"test.nodemailer@gmail.com\",\n            consumerKey: \"1/Gr2OVA2Ol64fNyjZCns-bkRau5eLisbdlEa_HSuTaEk\",\n            consumerSecret: \"ymFpseHtEnrIsuL8Ppbfnnk3\"\n        })\n    }\n});\n```\n\nOnce the connection object has been created, use connect() to create the actual connection.\n```javascript\nclient.connect();\n```\n\nWhen the connection has been successfully established a 'connect' event is emitted.\n```javascript\nclient.on(\"connect\", function(){\n    console.log(\"Successfully connected to server\");\n});\n```\n\n### Logout and disconnect\n\nLogout from IMAP and close NET connection.\n\n```javascript\nclient.close();\nclient.on('close', function (){\n    console.log('DISCONNECTED!');\n});\n```\n\n### List available mailboxes\n\nTo list the available mailboxes use\n```javascript\nclient.listMailboxes(callback)\n```\n\nWhere\n\n  * **callback** *(error, mailboxes)* returns a list of root mailbox object\n\nMailbox objects have the following properties\n\n  * **name** - the display name of the mailbox\n  * **path** - the actual name of the mailbox, use it for opening the mailbox\n  * **type** - the type of the mailbox (if server hints about it)\n  * **hasChildren** - boolean indicator, if true, has child mailboxes\n  * **disabled** - boolean indicator, if true, can not be selected\n\nAdditionally mailboxes have the following methods\n\n  * **open** *([options, ]callback)* - open the mailbox (shorthand for *client.openMailbox*)\n  * **listChildren** *(callback)* - if the mailbox has children (*hasChildren* is true), lists the child mailboxes\n\nExample:\n```javascript\nclient.listMailboxes(function(error, mailboxes){\n    for(var i=0, len = mailboxes.length; i<len; i++){\n        if(mailboxes[i].hasChildren){\n            mailboxes[i].listChildren(function(error, children){\n                console.log(children);\n            });\n        }\n    }\n});\n```\n\n### Fetch a specified mailbox object\n\nIf you need to access a specific mailbox object (for creating or listing child\nmailboxes etc.), you can do it with\n```javascript\nclient.getMailbox(path, callback)\n```\n\nWhere\n\n  * **path** is the mailbox directory path\n  * **callback** *(error, mailbox)* is the callback function\n\nExample:\n```javascript\nclient.getMailbox(\"INBOX.Arhiiv\", function(error, mailbox){\n    if(mailbox && mailbox.hasChildren){\n        mailbox.listChildren(console.log);\n    }\n});\n```\n\n### Select a mailbox\n\nBefore you can check mailbox contents, you need to select one with\n```javascript\nclient.openMailbox(path[, options], callback)\n```\n\nWhere\n\n  * **path** is the path to the mailbox (ie. \"INBOX\" or \"INBOX/Arhiiv\") or a mailbox object\n  * **options** is an optional options object\n  * **options.readOnly** - if set to true, open the mailbox in read-only mode (downloading messages does not update seen/unseen flag)\n  * **callback** *(error, info)* is a callback function to run after the mailbox has been opened. Has an error param in case the opening failed and a info param with the properties of the opened mailbox.\n\nExample\n```javascript\nclient.on(\"connect\", function(){\n    client.openMailbox(\"INBOX\", function(error, info){\n        if(error) throw error;\n        console.log(\"Message count in INBOX: \" + info.count);\n    });\n});\n```\n\n### Listing e-mails\n\nOnce a mailbox has been opened you can list contained e-mails with\n```javascript\nclient.listMessages(from[, limit], callback)\n```\n\nWhere\n\n  * **from** is the index of the first message (0 based), you can use negative numbers to count from the end (-10 indicates the 10 last messages)\n  * **limit** defines the maximum count of messages to fetch, if not set or 0 all messages from the starting position will be included\n  * **callback** *(error, messages)* is the callback function to run with the message array\n\nExample\n```javascript\n// list newest 10 messages\nclient.listMessages(-10, function(err, messages){\n    messages.forEach(function(message){\n        console.log(message.UID + \": \" + message.title);\n    });\n});\n```\n\nExample output for a message listing\n```javascript\n[\n    {\n        // if uidvalidity changes, all uid values are void!\n        UIDValidity: '664399135',\n\n        // uid value of the message\n        UID: 52,\n\n        // message flags (Array)\n        flags: [ '\\\\Flagged', '\\\\Seen' ],\n\n        // date of the message (Date object)\n        date: Wed, 25 Apr 2012 12:23:05 GMT,\n\n        title: 'This is a message, may contain unicode symbols',\n\n        // single \"from:\" address\n        from: {\n            name: 'Andris Reinman',\n            address: 'andris.reinman@gmail.com'\n        },\n\n        // an array of \"to:\" addresses\n        to: [\n            {\n                name: 'test nodemailer',\n                address: 'test.nodemailer@gmail.com'\n            }\n        ],\n\n        // an array of \"cc:\" addresses\n        cc: [\n            {\n                name: 'test nodemailer',\n                address: 'test.nodemailer@gmail.com'\n            }\n        ],\n\n        messageId: '<04541AB5-9FBD-4255-81AA-18FE67CB97E5@gmail.com>',\n        inReplyTo: '<4FB16D5A.30808@gmail.com>',\n        references: ['<4FB16D5A.30808@gmail.com>','<1299323903.19454@foo.bar>'],\n\n        // bodystructure of the message\n        bodystructure: {\n            '1': {\n                part: '1',\n                type: 'text/plain',\n                parameters: {},\n                encoding: 'quoted-printable',\n                size: 16\n            },\n            '2': {\n                part: '2',\n                type: 'text/html',\n                parameters: {},\n                encoding: 'quoted-printable',\n                size: 248\n            },\n            type: 'multipart/alternative'\n        }\n    },\n    ...\n]\n```\n\n**NB!** If some properties are not present in a message, it may be not included\nin the message object - for example, if there are no \"cc:\" addresses listed,\nthere is no \"cc\" field in the message object.\n\n### Listing messages by UID\n\nYou can list messages by UID with\n\n```javascript\nclient.listMessagesByUID(firstUID, lastUID, callback)\n```\n\nWhere\n\n  * **firstUI** is the UID value to start listing from\n  * **lastUID** is the UID value to end listing with, can be a number or \"*\"\n  * **callback** is the same as with `listMessage`\n\n### Listing flags\n\nAs a shorthand listing, you can also list only UID and Flags pairs\n```javascript\nclient.listFlags(from[, limit], callback)\n```\n\nWhere\n\n  * **from** is the index of the first message (0 based), you can use negative numbers to count from the end (-10 indicates the 10 last messages)\n  * **limit** defines the maximum count of messages to fetch, if not set or 0 all messages from the starting position will be included\n  * **callback** *(error, messages)* is the callback function to run with the message array\n\nExample\n```javascript\n// list flags for newest 10 messages\nclient.listFlags(-10, function(err, messages){\n    messages.forEach(function(message){\n        console.log(message.UID, message.flags);\n    });\n});\n```\n\nExample output for a message listing\n```javascript\n[\n    {\n        // if uidvalidity changes, all uid values are void!\n        UIDValidity: '664399135',\n\n        // uid value of the message\n        UID: 52,\n\n        // message flags (Array)\n        flags: [ '\\\\Flagged', '\\\\Seen' ]\n    },\n    ...\n]\n```\n\n### Fetch message details\n\nTo fetch message data (flags, title, etc) for a specific message, use\n```javascript\nclient.fetchData(uid, callback)\n```\n\nWhere\n\n  * **uid** is the UID value for the mail\n  * **callback** *(error, message)* is the callback function to with the message data object (or null if the message was not found). Gets an error parameter if error occured\n\nExample\n```javascript\nclient.fetchData(123, function(error, message){\n    console.log(message.flags);\n});\n```\n\n### Fetch message contents\n\nMessage listing only retrieves the envelope part of the message. To get the full RFC822 message body\nyou need to fetch the message.\n```javascript\nvar messageStream = client.createMessageStream(uid)\n```\n\nWhere\n\n  * **uid** is the UID value for the mail\n\nExample (output message contents to console)\n```javascript\nclient.createMessageStream(123).pipe(process.stdout, {end: false});\n```\n\n**NB!** If the opened mailbox is not in read-only mode, the message will be\nautomatically marked as read (\\Seen flag is set) when the message is fetched.\n\n### Searching for messages\n\nYou can search for messages with\n\n```javascript\nclient.search(query[, isUID], callback)\n```\n\nWhere\n\n  * **query** is the search term as an object\n  * **isUID** is an optional boolean value - if set to true perform `UID SEARCH` instead of `SEARCH`\n  * **callback** is the callback function with error object and an array of matching seq or UID numbers\n\n**Queries**\n\nQueries are composed as objects where keys are search terms and values are term arguments. \nOnly strings, numbers and Dates are used. If the value is an array, the members of it are processed separately\n(use this for terms that require multiple params). If the value is a Date, it is converted to the form of \"01-Jan-1970\".\nSubqueries (OR, NOT) are made up of objects\n\nExamples:\n\n```javascript\n// SEARCH UNSEEN\nquery = {unseen: true}\n// SEARCH KEYWORD \"flagname\"\nquery = {keyword: \"flagname\"}\n// SEARCH HEADER \"subject\" \"hello world\"\nquery = {header: [\"subject\", \"hello world\"]};\n// SEARCH UNSEEN HEADER \"subject\" \"hello world\"\nquery = {unseen: true, header: [\"subject\", \"hello world\"]};\n// SEARCH OR UNSEEN SEEN\nquery = {or: {unseen: true, seen: true}};\n// SEARCH UNSEEN NOT SEEN\nquery = {unseen: true, not: {seen: true}}\n```\n\nReturned list is already sorted and all values are numbers.\n\n### Message flags\n\nYou can add and remove message flags like `\\Seen` or `\\Answered` with `client.addFlags()` and `client.removeFlags()`\n\n**List flags**\n```javascript\nclient.fetchFlags(uid, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier\n  * **callback** *(error, flags)* is the callback to run, gets message flags array as a parameter\n\n**Add flags**\n```javascript\nclient.addFlags(uid, flags, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier\n  * **flags** is the array of flags to be added\n  * **callback** *(error, flags)* is the callback to run, gets message flags array as a parameter\n\n**Remove flags**\n```javascript\nclient.removeFlags(uid, flags, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier\n  * **flags** is the array of flags to be removed\n  * **callback** *(error, flags)* is the callback to run, gets message flags array as a parameter\n\nExample\n```javascript\n// add \\Seen and \\Flagged flag to a message\nclient.addFlags(123, [\"\\\\Seen\", \"\\\\Flagged\"], function(err, flags){\n    console.log(\"Current flags for a message: \", flags);\n});\n\n// remove \\Flagged flag from a message\nclient.removeFlags(123, [\"\\\\Flagged\"], function(err, flags){\n    console.log(\"Current flags for a message: \", flags);\n});\n```\n\n### Upload a message\n\nYou can upload a message to current mailbox with `client.storeMessage()`\n```javascript\nclient.storeMessage(message[, flags], callback)\n```\n\nWhere\n\n  * **message** is the message to be uploaded either as a string or a Buffer.\n  * **flags** is an array of flags to set to the message (ie. `[\"\\\\Seen\"]`)\n  * **callback** is the callback function, gets message UID and UID and UIDValitity as a param\n\nExample\n```javascript\nclient.storeMessage(\"From: ....\", [\"\\\\Seen\"], function(err, params){\n    console.log(err || params.UIDValidity +\", \"+ params.UID);\n});\n```\n\nWhen adding a message to the mailbox, the new message event is also raised after\nthe mail has been stored.\n\n### Copy a message\n\nYou can copy a message from the current mailbox to a selected one with `client.copyMessage()`\n```javascript\nclient.copyMessage(uid, destination, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier.\n  * **destination** is the path to the destination mailbox\n  * **callback** is the callback function\n\nExample\n```javascript\nclient.copyMessage(123, \"[GMail]/Junk\", function(err){\n    console.log(err || \"success, copied to junk\");\n});\n```\n\n### Move a message\n\nYou can move a message from current mailbox to a selected one with `client.moveMessage()`\n```javascript\nclient.moveMessage(uid, destination, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier.\n  * **destination** is the path to the destination mailbox\n  * **callback** is the callback function\n\nExample\n```javascript\nclient.moveMessage(123, \"[GMail]/Junk\", function(err){\n    console.log(err || \"success, moved to junk\");\n});\n```\n\n### Delete a message\n\nYou can delete a message from current mailbox with `client.deleteMessage()`\n```javascript\nclient.deleteMessage(uid, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier.\n  * **callback** is the callback function\n\nExample\n```javascript\nclient.deleteMessage(123, function(err){\n    console.log(err || \"success, message deleted\");\n});\n```\n\n### Wait for new messages\n\nYou can listen for new incoming e-mails with event \"new\"\n```javascript\nclient.on(\"new\", function(message){\n    console.log(\"New incoming message \" + message.title);\n});\n```\n\n## Complete example\n\nListing newest 10 messages:\n```javascript\nvar inbox = require(\"inbox\");\n\nvar client = inbox.createConnection(false, \"imap.gmail.com\", {\n    secureConnection: true,\n    auth:{\n        user: \"test.nodemailer@gmail.com\",\n        pass: \"Nodemailer123\"\n    }\n});\n\nclient.connect();\n\nclient.on(\"connect\", function(){\n    client.openMailbox(\"INBOX\", function(error, info){\n        if(error) throw error;\n\n        client.listMessages(-10, function(err, messages){\n            messages.forEach(function(message){\n                console.log(message.UID + \": \" + message.title);\n            });\n        });\n\n    });\n});\n```\n\n## License\n\n**MIT**\n",
  "readmeFilename": "README.md",
  "description": "This is a work in progress IMAP client for node.js.",
  "bugs": {
    "url": "https://github.com/andris9/inbox/issues"
  },
  "_id": "inbox@1.1.57",
  "dist": {
    "shasum": "c2478471aef9efab9e2ba62a43681313c2a32930"
  },
  "_from": "inbox@",
  "_resolved": "https://registry.npmjs.org/inbox/-/inbox-1.1.57.tgz"
}
